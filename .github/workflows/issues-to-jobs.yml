name: Convert job Issues to JSON

on:
  issues:
    types: [labeled]   # run once when labels are added

permissions:
  contents: write
  issues: write

jobs:
  convert:
    # proceed only if a label literally named "job" is on the issue
    if: contains(join(fromJson(toJson(github.event.issue.labels)).*.name, ','), 'job')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Normalize and validate body (accepts plain, fenced, or double-encoded JSON)
        id: norm
        shell: bash
        run: |
          set -e
          RAW='${{ github.event.issue.body }}'

          # Normalize newlines and trim
          CLEAN=$(printf "%s" "$RAW" | tr -d '\r' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

          # If wrapped in ```json ... ``` fences, strip them
          if printf "%s\n" "$CLEAN" | grep -qE '^```'; then
            CLEAN=$(printf "%s" "$CLEAN" | sed -E '1s/^```(json|JSON)?[[:space:]]*//; $s/[[:space:]]*```$//')
          fi

          # Try parse as JSON (object/array/string/etc.)
          if printf "%s" "$CLEAN" | jq -e . > /dev/null 2>&1; then
            TYPE=$(printf "%s" "$CLEAN" | jq -r 'type')
            if [ "$TYPE" = "string" ]; then
              # Body is a JSON string containing JSON -> unquote it once
              INNER=$(printf "%s" "$CLEAN" | jq -r .)
              if printf "%s" "$INNER" | jq -e . > /dev/null 2>&1; then
                CLEAN="$INNER"
              else
                echo "❌ Body is a JSON string but not valid JSON inside."; exit 1
              fi
            fi
          else
            echo "❌ Issue body is not valid JSON."; exit 1
          fi

          # Save normalized JSON to file and expose slug
          mkdir -p jobs
          printf "%s" "$CLEAN" | jq . > jobs/_incoming.json
          SLUG=$(jq -r '.slug' jobs/_incoming.json)
          if [ -z "$SLUG" ] || [ "$SLUG" = "null" ]; then
            echo "❌ Missing 'slug' field in JSON."; exit 1
          fi

          echo "slug=$SLUG" >> $GITHUB_OUTPUT

      - name: Skip if already published
        id: skip
        shell: bash
        run: |
          if [ -f "jobs/${{ steps.norm.outputs.slug }}.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Save jobs/{slug}.json
        if: steps.skip.outputs.exists == 'false'
        run: |
          cp jobs/_incoming.json "jobs/${{ steps.norm.outputs.slug }}.json"
          rm jobs/_incoming.json

      - name: Rebuild jobs index (jobs/jobs.json)
        if: steps.skip.outputs.exists == 'false'
        shell: bash
        run: |
          shopt -s nullglob
          FILES=(jobs/*.json)
          if [ ${#FILES[@]} -eq 0 ]; then
            echo "[]" > jobs/jobs.json
          else
            jq -s '[ .[] | del(.descriptionHtml) ]' "${FILES[@]}" > jobs/jobs.json
          fi

      - name: Commit JSON + index
        if: steps.skip.outputs.exists == 'false'
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add jobs/*.json
          git commit -m "Publish job from Issue #${{ github.event.issue.number }}" || echo "No changes"
          git push

      - name: Comment and close Issue
        if: steps.skip.outputs.exists == 'false'
        uses: peter-evans/close-issue@v3
        with:
          issue-number: ${{ github.event.issue.number }}
          comment: |
            ✅ Published to the job board.
            File: /jobs/${{ steps.norm.outputs.slug }}.json
            Index updated: /jobs/jobs.json
